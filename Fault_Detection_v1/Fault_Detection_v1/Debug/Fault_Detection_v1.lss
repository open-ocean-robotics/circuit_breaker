
Fault_Detection_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803c00  00803c00  000009ff  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000980  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000b  00008980  00000980  000009f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000030  00000000  00000000  000009ff  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e08  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000153d  00000000  00000000  00002898  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000046a  00000000  00000000  00003dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00004240  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e6b  00000000  00000000  00004274  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  000050df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00005127  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	cd bf       	out	0x3d, r28	; 61
  84:	df e3       	ldi	r29, 0x3F	; 63
  86:	de bf       	out	0x3e, r29	; 62
  88:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  8c:	0c 94 be 04 	jmp	0x97c	; 0x97c <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <main>:
#include <util/delay.h>
#include <stdio.h>


int main(void)
{
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	c9 54       	subi	r28, 0x49	; 73
  9e:	d1 09       	sbc	r29, r1
  a0:	cd bf       	out	0x3d, r28	; 61
  a2:	de bf       	out	0x3e, r29	; 62
	/* initialization of registers */
	//PORTA.DIRSET = 0x20;	//sets PIN5 as output (not sure of needed)
	PORTB.DIRSET = 0x04;	//sets PB2 as output 
  a4:	80 e2       	ldi	r24, 0x20	; 32
  a6:	94 e0       	ldi	r25, 0x04	; 4
  a8:	24 e0       	ldi	r18, 0x04	; 4
  aa:	fc 01       	movw	r30, r24
  ac:	21 83       	std	Z+1, r18	; 0x01
	PORTA.IN = 0xDF;		//sets all A pins to be inputs except for PIN5
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	94 e0       	ldi	r25, 0x04	; 4
  b2:	2f ed       	ldi	r18, 0xDF	; 223
  b4:	fc 01       	movw	r30, r24
  b6:	20 87       	std	Z+8, r18	; 0x08
	
	ADC0.CTRLA |= 0x01;		//enables ADC
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	96 e0       	ldi	r25, 0x06	; 6
  bc:	20 e0       	ldi	r18, 0x00	; 0
  be:	36 e0       	ldi	r19, 0x06	; 6
  c0:	f9 01       	movw	r30, r18
  c2:	20 81       	ld	r18, Z
  c4:	21 60       	ori	r18, 0x01	; 1
  c6:	fc 01       	movw	r30, r24
  c8:	20 83       	st	Z, r18
	ADC0.CTRLC |= 0x10;		//sets ADC reference to VCC
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	96 e0       	ldi	r25, 0x06	; 6
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	36 e0       	ldi	r19, 0x06	; 6
  d2:	f9 01       	movw	r30, r18
  d4:	22 81       	ldd	r18, Z+2	; 0x02
  d6:	20 61       	ori	r18, 0x10	; 16
  d8:	fc 01       	movw	r30, r24
  da:	22 83       	std	Z+2, r18	; 0x02
	ADC0.INTCTRL = 0x01;	//sets write interrupt
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	96 e0       	ldi	r25, 0x06	; 6
  e0:	21 e0       	ldi	r18, 0x01	; 1
  e2:	fc 01       	movw	r30, r24
  e4:	22 87       	std	Z+10, r18	; 0x0a
	
	//see page 289 in manual (23.3.1) for initialization
	USART0.BAUD = 9600;		//set baud
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	98 e0       	ldi	r25, 0x08	; 8
  ea:	20 e8       	ldi	r18, 0x80	; 128
  ec:	35 e2       	ldi	r19, 0x25	; 37
  ee:	fc 01       	movw	r30, r24
  f0:	20 87       	std	Z+8, r18	; 0x08
  f2:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLC &= 0x37;	//set first two bits 00 to ensure asynchronous and set 1 stop bit
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	98 e0       	ldi	r25, 0x08	; 8
  f8:	20 e0       	ldi	r18, 0x00	; 0
  fa:	38 e0       	ldi	r19, 0x08	; 8
  fc:	f9 01       	movw	r30, r18
  fe:	27 81       	ldd	r18, Z+7	; 0x07
 100:	27 73       	andi	r18, 0x37	; 55
 102:	fc 01       	movw	r30, r24
 104:	27 83       	std	Z+7, r18	; 0x07
	USART0.CTRLC |= 0x03;	//set character size to 8 bit
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	98 e0       	ldi	r25, 0x08	; 8
 10a:	20 e0       	ldi	r18, 0x00	; 0
 10c:	38 e0       	ldi	r19, 0x08	; 8
 10e:	f9 01       	movw	r30, r18
 110:	27 81       	ldd	r18, Z+7	; 0x07
 112:	23 60       	ori	r18, 0x03	; 3
 114:	fc 01       	movw	r30, r24
 116:	27 83       	std	Z+7, r18	; 0x07
	
	float ADCResult = 0; 
 118:	1b 82       	std	Y+3, r1	; 0x03
 11a:	1c 82       	std	Y+4, r1	; 0x04
 11c:	1d 82       	std	Y+5, r1	; 0x05
 11e:	1e 82       	std	Y+6, r1	; 0x06
	float Voltage = 0;		//ADC raw output voltage adjusted to readable value
 120:	1f 82       	std	Y+7, r1	; 0x07
 122:	18 86       	std	Y+8, r1	; 0x08
 124:	19 86       	std	Y+9, r1	; 0x09
 126:	1a 86       	std	Y+10, r1	; 0x0a
	float Voltage_Current_Sensor = 0;		//ADC voltage output from current sensor adjusted to readable value
 128:	1b 86       	std	Y+11, r1	; 0x0b
 12a:	1c 86       	std	Y+12, r1	; 0x0c
 12c:	1d 86       	std	Y+13, r1	; 0x0d
 12e:	1e 86       	std	Y+14, r1	; 0x0e
	float Current = 0;
 130:	1f 86       	std	Y+15, r1	; 0x0f
 132:	18 8a       	std	Y+16, r1	; 0x10
 134:	19 8a       	std	Y+17, r1	; 0x11
 136:	1a 8a       	std	Y+18, r1	; 0x12
	float Current_Sensor_Volt_Offset = 0.485;
 138:	8c ee       	ldi	r24, 0xEC	; 236
 13a:	91 e5       	ldi	r25, 0x51	; 81
 13c:	a8 ef       	ldi	r26, 0xF8	; 248
 13e:	be e3       	ldi	r27, 0x3E	; 62
 140:	8b 8b       	std	Y+19, r24	; 0x13
 142:	9c 8b       	std	Y+20, r25	; 0x14
 144:	ad 8b       	std	Y+21, r26	; 0x15
 146:	be 8b       	std	Y+22, r27	; 0x16
	float Current_Sensor_Sensitivity = 0.08;	//80mV/A
 148:	8a e0       	ldi	r24, 0x0A	; 10
 14a:	97 ed       	ldi	r25, 0xD7	; 215
 14c:	a3 ea       	ldi	r26, 0xA3	; 163
 14e:	bd e3       	ldi	r27, 0x3D	; 61
 150:	8f 8b       	std	Y+23, r24	; 0x17
 152:	98 8f       	std	Y+24, r25	; 0x18
 154:	a9 8f       	std	Y+25, r26	; 0x19
 156:	ba 8f       	std	Y+26, r27	; 0x1a
	float BAUD = 0;
 158:	1b 8e       	std	Y+27, r1	; 0x1b
 15a:	1c 8e       	std	Y+28, r1	; 0x1c
 15c:	1d 8e       	std	Y+29, r1	; 0x1d
 15e:	1e 8e       	std	Y+30, r1	; 0x1e
	float UART = 0;
 160:	1f 8e       	std	Y+31, r1	; 0x1f
 162:	18 a2       	std	Y+32, r1	; 0x20
 164:	19 a2       	std	Y+33, r1	; 0x21
 166:	1a a2       	std	Y+34, r1	; 0x22
	float clkb = 0;
 168:	1b a2       	std	Y+35, r1	; 0x23
 16a:	1c a2       	std	Y+36, r1	; 0x24
 16c:	1d a2       	std	Y+37, r1	; 0x25
 16e:	1e a2       	std	Y+38, r1	; 0x26
	char tx[] =  "grantjones" ;
 170:	8b e0       	ldi	r24, 0x0B	; 11
 172:	e0 e8       	ldi	r30, 0x80	; 128
 174:	f9 e8       	ldi	r31, 0x89	; 137
 176:	de 01       	movw	r26, r28
 178:	df 96       	adiw	r26, 0x3f	; 63
 17a:	01 90       	ld	r0, Z+
 17c:	0d 92       	st	X+, r0
 17e:	8a 95       	dec	r24
 180:	e1 f7       	brne	.-8      	; 0x17a <main+0xe6>
	float tx_before = 0;
 182:	1f a2       	std	Y+39, r1	; 0x27
 184:	18 a6       	std	Y+40, r1	; 0x28
 186:	19 a6       	std	Y+41, r1	; 0x29
 188:	1a a6       	std	Y+42, r1	; 0x2a
	float tx_after = 0;
 18a:	1b a6       	std	Y+43, r1	; 0x2b
 18c:	1c a6       	std	Y+44, r1	; 0x2c
 18e:	1d a6       	std	Y+45, r1	; 0x2d
 190:	1e a6       	std	Y+46, r1	; 0x2e
	int tx_length = 0;
 192:	1f a6       	std	Y+47, r1	; 0x2f
 194:	18 aa       	std	Y+48, r1	; 0x30
	int tx_counter = 0;
 196:	19 82       	std	Y+1, r1	; 0x01
 198:	1a 82       	std	Y+2, r1	; 0x02


	while (1)
	{
		//LED ON - get voltage
		PORTA.PIN5CTRL = 0x08;		//enables pull up for PIN4 (LED)
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	94 e0       	ldi	r25, 0x04	; 4
 19e:	28 e0       	ldi	r18, 0x08	; 8
 1a0:	fc 01       	movw	r30, r24
 1a2:	25 8b       	std	Z+21, r18	; 0x15
		
		ADC0.MUXPOS = 0x04;			//sets which pin gets the analog signal PA4 (PIN2)
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	96 e0       	ldi	r25, 0x06	; 6
 1a8:	24 e0       	ldi	r18, 0x04	; 4
 1aa:	fc 01       	movw	r30, r24
 1ac:	26 83       	std	Z+6, r18	; 0x06
		ADC0.COMMAND |= 0x01;		//begins single time conversion
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	96 e0       	ldi	r25, 0x06	; 6
 1b2:	20 e0       	ldi	r18, 0x00	; 0
 1b4:	36 e0       	ldi	r19, 0x06	; 6
 1b6:	f9 01       	movw	r30, r18
 1b8:	20 85       	ldd	r18, Z+8	; 0x08
 1ba:	21 60       	ori	r18, 0x01	; 1
 1bc:	fc 01       	movw	r30, r24
 1be:	20 87       	std	Z+8, r18	; 0x08
			while (ADC0.COMMAND == 0x01){}
 1c0:	00 00       	nop
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	96 e0       	ldi	r25, 0x06	; 6
 1c6:	fc 01       	movw	r30, r24
 1c8:	80 85       	ldd	r24, Z+8	; 0x08
 1ca:	81 30       	cpi	r24, 0x01	; 1
 1cc:	d1 f3       	breq	.-12     	; 0x1c2 <main+0x12e>
		ADCResult = ADC0.RES;
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	96 e0       	ldi	r25, 0x06	; 6
 1d2:	fc 01       	movw	r30, r24
 1d4:	80 89       	ldd	r24, Z+16	; 0x10
 1d6:	91 89       	ldd	r25, Z+17	; 0x11
 1d8:	cc 01       	movw	r24, r24
 1da:	a0 e0       	ldi	r26, 0x00	; 0
 1dc:	b0 e0       	ldi	r27, 0x00	; 0
 1de:	bc 01       	movw	r22, r24
 1e0:	cd 01       	movw	r24, r26
 1e2:	0e 94 9a 03 	call	0x734	; 0x734 <__floatunsisf>
 1e6:	dc 01       	movw	r26, r24
 1e8:	cb 01       	movw	r24, r22
 1ea:	8b 83       	std	Y+3, r24	; 0x03
 1ec:	9c 83       	std	Y+4, r25	; 0x04
 1ee:	ad 83       	std	Y+5, r26	; 0x05
 1f0:	be 83       	std	Y+6, r27	; 0x06
		Voltage = ((ADCResult)*5)/1023;		//high and low bytes of 10 bit result converted to volts
 1f2:	20 e0       	ldi	r18, 0x00	; 0
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	40 ea       	ldi	r20, 0xA0	; 160
 1f8:	50 e4       	ldi	r21, 0x40	; 64
 1fa:	6b 81       	ldd	r22, Y+3	; 0x03
 1fc:	7c 81       	ldd	r23, Y+4	; 0x04
 1fe:	8d 81       	ldd	r24, Y+5	; 0x05
 200:	9e 81       	ldd	r25, Y+6	; 0x06
 202:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__mulsf3>
 206:	dc 01       	movw	r26, r24
 208:	cb 01       	movw	r24, r22
 20a:	20 e0       	ldi	r18, 0x00	; 0
 20c:	30 ec       	ldi	r19, 0xC0	; 192
 20e:	4f e7       	ldi	r20, 0x7F	; 127
 210:	54 e4       	ldi	r21, 0x44	; 68
 212:	bc 01       	movw	r22, r24
 214:	cd 01       	movw	r24, r26
 216:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__divsf3>
 21a:	dc 01       	movw	r26, r24
 21c:	cb 01       	movw	r24, r22
 21e:	8f 83       	std	Y+7, r24	; 0x07
 220:	98 87       	std	Y+8, r25	; 0x08
 222:	a9 87       	std	Y+9, r26	; 0x09
 224:	ba 87       	std	Y+10, r27	; 0x0a
		//		_delay_ms(200);
		
		
		//LED OFF - get current
		PORTA.PIN5CTRL = 0x00;		//disables pull up for PIN4
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	94 e0       	ldi	r25, 0x04	; 4
 22a:	fc 01       	movw	r30, r24
 22c:	15 8a       	std	Z+21, r1	; 0x15
		
		ADC0.MUXPOS = 0x02;			//sets which pin gets the analog signal on PA2 (PIN18)
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	96 e0       	ldi	r25, 0x06	; 6
 232:	22 e0       	ldi	r18, 0x02	; 2
 234:	fc 01       	movw	r30, r24
 236:	26 83       	std	Z+6, r18	; 0x06
		ADC0.COMMAND |= 0x01;		//begins single time conversion
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	96 e0       	ldi	r25, 0x06	; 6
 23c:	20 e0       	ldi	r18, 0x00	; 0
 23e:	36 e0       	ldi	r19, 0x06	; 6
 240:	f9 01       	movw	r30, r18
 242:	20 85       	ldd	r18, Z+8	; 0x08
 244:	21 60       	ori	r18, 0x01	; 1
 246:	fc 01       	movw	r30, r24
 248:	20 87       	std	Z+8, r18	; 0x08
			while (ADC0.COMMAND == 0x01){}	//could be an issue
 24a:	00 00       	nop
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	96 e0       	ldi	r25, 0x06	; 6
 250:	fc 01       	movw	r30, r24
 252:	80 85       	ldd	r24, Z+8	; 0x08
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	d1 f3       	breq	.-12     	; 0x24c <main+0x1b8>
		ADCResult = ADC0.RES;
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	96 e0       	ldi	r25, 0x06	; 6
 25c:	fc 01       	movw	r30, r24
 25e:	80 89       	ldd	r24, Z+16	; 0x10
 260:	91 89       	ldd	r25, Z+17	; 0x11
 262:	cc 01       	movw	r24, r24
 264:	a0 e0       	ldi	r26, 0x00	; 0
 266:	b0 e0       	ldi	r27, 0x00	; 0
 268:	bc 01       	movw	r22, r24
 26a:	cd 01       	movw	r24, r26
 26c:	0e 94 9a 03 	call	0x734	; 0x734 <__floatunsisf>
 270:	dc 01       	movw	r26, r24
 272:	cb 01       	movw	r24, r22
 274:	8b 83       	std	Y+3, r24	; 0x03
 276:	9c 83       	std	Y+4, r25	; 0x04
 278:	ad 83       	std	Y+5, r26	; 0x05
 27a:	be 83       	std	Y+6, r27	; 0x06
		Voltage_Current_Sensor = (((ADCResult)*5)/1023) - Current_Sensor_Volt_Offset;		//Voltage = Vin*1023/Vref
 27c:	20 e0       	ldi	r18, 0x00	; 0
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	40 ea       	ldi	r20, 0xA0	; 160
 282:	50 e4       	ldi	r21, 0x40	; 64
 284:	6b 81       	ldd	r22, Y+3	; 0x03
 286:	7c 81       	ldd	r23, Y+4	; 0x04
 288:	8d 81       	ldd	r24, Y+5	; 0x05
 28a:	9e 81       	ldd	r25, Y+6	; 0x06
 28c:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__mulsf3>
 290:	dc 01       	movw	r26, r24
 292:	cb 01       	movw	r24, r22
 294:	20 e0       	ldi	r18, 0x00	; 0
 296:	30 ec       	ldi	r19, 0xC0	; 192
 298:	4f e7       	ldi	r20, 0x7F	; 127
 29a:	54 e4       	ldi	r21, 0x44	; 68
 29c:	bc 01       	movw	r22, r24
 29e:	cd 01       	movw	r24, r26
 2a0:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__divsf3>
 2a4:	dc 01       	movw	r26, r24
 2a6:	cb 01       	movw	r24, r22
 2a8:	2b 89       	ldd	r18, Y+19	; 0x13
 2aa:	3c 89       	ldd	r19, Y+20	; 0x14
 2ac:	4d 89       	ldd	r20, Y+21	; 0x15
 2ae:	5e 89       	ldd	r21, Y+22	; 0x16
 2b0:	bc 01       	movw	r22, r24
 2b2:	cd 01       	movw	r24, r26
 2b4:	0e 94 87 02 	call	0x50e	; 0x50e <__subsf3>
 2b8:	dc 01       	movw	r26, r24
 2ba:	cb 01       	movw	r24, r22
 2bc:	8b 87       	std	Y+11, r24	; 0x0b
 2be:	9c 87       	std	Y+12, r25	; 0x0c
 2c0:	ad 87       	std	Y+13, r26	; 0x0d
 2c2:	be 87       	std	Y+14, r27	; 0x0e
		Current = (Voltage_Current_Sensor)/Current_Sensor_Sensitivity;  //<-- offset
 2c4:	2f 89       	ldd	r18, Y+23	; 0x17
 2c6:	38 8d       	ldd	r19, Y+24	; 0x18
 2c8:	49 8d       	ldd	r20, Y+25	; 0x19
 2ca:	5a 8d       	ldd	r21, Y+26	; 0x1a
 2cc:	6b 85       	ldd	r22, Y+11	; 0x0b
 2ce:	7c 85       	ldd	r23, Y+12	; 0x0c
 2d0:	8d 85       	ldd	r24, Y+13	; 0x0d
 2d2:	9e 85       	ldd	r25, Y+14	; 0x0e
 2d4:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__divsf3>
 2d8:	dc 01       	movw	r26, r24
 2da:	cb 01       	movw	r24, r22
 2dc:	8f 87       	std	Y+15, r24	; 0x0f
 2de:	98 8b       	std	Y+16, r25	; 0x10
 2e0:	a9 8b       	std	Y+17, r26	; 0x11
 2e2:	ba 8b       	std	Y+18, r27	; 0x12
		//		_delay_ms(200);				//0.535A correct, compared to 0.658A being read by the sensor/MCU
		
		
		/*send over uart*/
		BAUD = USART0.BAUD;
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	98 e0       	ldi	r25, 0x08	; 8
 2e8:	fc 01       	movw	r30, r24
 2ea:	80 85       	ldd	r24, Z+8	; 0x08
 2ec:	91 85       	ldd	r25, Z+9	; 0x09
 2ee:	cc 01       	movw	r24, r24
 2f0:	a0 e0       	ldi	r26, 0x00	; 0
 2f2:	b0 e0       	ldi	r27, 0x00	; 0
 2f4:	bc 01       	movw	r22, r24
 2f6:	cd 01       	movw	r24, r26
 2f8:	0e 94 9a 03 	call	0x734	; 0x734 <__floatunsisf>
 2fc:	dc 01       	movw	r26, r24
 2fe:	cb 01       	movw	r24, r22
 300:	8b 8f       	std	Y+27, r24	; 0x1b
 302:	9c 8f       	std	Y+28, r25	; 0x1c
 304:	ad 8f       	std	Y+29, r26	; 0x1d
 306:	be 8f       	std	Y+30, r27	; 0x1e
		UART = USART0.CTRLC;
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	98 e0       	ldi	r25, 0x08	; 8
 30c:	fc 01       	movw	r30, r24
 30e:	87 81       	ldd	r24, Z+7	; 0x07
 310:	88 2f       	mov	r24, r24
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	a0 e0       	ldi	r26, 0x00	; 0
 316:	b0 e0       	ldi	r27, 0x00	; 0
 318:	bc 01       	movw	r22, r24
 31a:	cd 01       	movw	r24, r26
 31c:	0e 94 9a 03 	call	0x734	; 0x734 <__floatunsisf>
 320:	dc 01       	movw	r26, r24
 322:	cb 01       	movw	r24, r22
 324:	8f 8f       	std	Y+31, r24	; 0x1f
 326:	98 a3       	std	Y+32, r25	; 0x20
 328:	a9 a3       	std	Y+33, r26	; 0x21
 32a:	ba a3       	std	Y+34, r27	; 0x22
		clkb = CLKCTRL.MCLKCTRLB;
 32c:	80 e6       	ldi	r24, 0x60	; 96
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	fc 01       	movw	r30, r24
 332:	81 81       	ldd	r24, Z+1	; 0x01
 334:	88 2f       	mov	r24, r24
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	a0 e0       	ldi	r26, 0x00	; 0
 33a:	b0 e0       	ldi	r27, 0x00	; 0
 33c:	bc 01       	movw	r22, r24
 33e:	cd 01       	movw	r24, r26
 340:	0e 94 9a 03 	call	0x734	; 0x734 <__floatunsisf>
 344:	dc 01       	movw	r26, r24
 346:	cb 01       	movw	r24, r22
 348:	8b a3       	std	Y+35, r24	; 0x23
 34a:	9c a3       	std	Y+36, r25	; 0x24
 34c:	ad a3       	std	Y+37, r26	; 0x25
 34e:	be a3       	std	Y+38, r27	; 0x26
		tx_before = USART0.TXDATAL;
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	98 e0       	ldi	r25, 0x08	; 8
 354:	fc 01       	movw	r30, r24
 356:	82 81       	ldd	r24, Z+2	; 0x02
 358:	88 2f       	mov	r24, r24
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	a0 e0       	ldi	r26, 0x00	; 0
 35e:	b0 e0       	ldi	r27, 0x00	; 0
 360:	bc 01       	movw	r22, r24
 362:	cd 01       	movw	r24, r26
 364:	0e 94 9a 03 	call	0x734	; 0x734 <__floatunsisf>
 368:	dc 01       	movw	r26, r24
 36a:	cb 01       	movw	r24, r22
 36c:	8f a3       	std	Y+39, r24	; 0x27
 36e:	98 a7       	std	Y+40, r25	; 0x28
 370:	a9 a7       	std	Y+41, r26	; 0x29
 372:	ba a7       	std	Y+42, r27	; 0x2a
		tx_counter = 0;
 374:	19 82       	std	Y+1, r1	; 0x01
 376:	1a 82       	std	Y+2, r1	; 0x02
		tx_length = sizeof(tx);
 378:	8b e0       	ldi	r24, 0x0B	; 11
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	8f a7       	std	Y+47, r24	; 0x2f
 37e:	98 ab       	std	Y+48, r25	; 0x30
		
		if (!((USART0.STATUS & 0x20) == 0)) /*if ready*/ {
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	98 e0       	ldi	r25, 0x08	; 8
 384:	fc 01       	movw	r30, r24
 386:	84 81       	ldd	r24, Z+4	; 0x04
 388:	88 2f       	mov	r24, r24
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	80 72       	andi	r24, 0x20	; 32
 38e:	99 27       	eor	r25, r25
 390:	89 2b       	or	r24, r25
 392:	09 f4       	brne	.+2      	; 0x396 <main+0x302>
 394:	a9 c0       	rjmp	.+338    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
			USART0.CTRLB |= 0x40;			//tx enable
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	98 e0       	ldi	r25, 0x08	; 8
 39a:	20 e0       	ldi	r18, 0x00	; 0
 39c:	38 e0       	ldi	r19, 0x08	; 8
 39e:	f9 01       	movw	r30, r18
 3a0:	26 81       	ldd	r18, Z+6	; 0x06
 3a2:	20 64       	ori	r18, 0x40	; 64
 3a4:	fc 01       	movw	r30, r24
 3a6:	26 83       	std	Z+6, r18	; 0x06
			
			while (tx_length > tx_counter) {
 3a8:	1d c0       	rjmp	.+58     	; 0x3e4 <main+0x350>
				while ((USART0.STATUS & 0x20) == 0){}
 3aa:	00 00       	nop
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	98 e0       	ldi	r25, 0x08	; 8
 3b0:	fc 01       	movw	r30, r24
 3b2:	84 81       	ldd	r24, Z+4	; 0x04
 3b4:	88 2f       	mov	r24, r24
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	80 72       	andi	r24, 0x20	; 32
 3ba:	99 27       	eor	r25, r25
 3bc:	89 2b       	or	r24, r25
 3be:	b1 f3       	breq	.-20     	; 0x3ac <main+0x318>
				USART0.TXDATAL = (tx[tx_counter]);
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	98 e0       	ldi	r25, 0x08	; 8
 3c4:	ae 01       	movw	r20, r28
 3c6:	41 5c       	subi	r20, 0xC1	; 193
 3c8:	5f 4f       	sbci	r21, 0xFF	; 255
 3ca:	29 81       	ldd	r18, Y+1	; 0x01
 3cc:	3a 81       	ldd	r19, Y+2	; 0x02
 3ce:	24 0f       	add	r18, r20
 3d0:	35 1f       	adc	r19, r21
 3d2:	f9 01       	movw	r30, r18
 3d4:	20 81       	ld	r18, Z
 3d6:	fc 01       	movw	r30, r24
 3d8:	22 83       	std	Z+2, r18	; 0x02
				tx_counter++;
 3da:	89 81       	ldd	r24, Y+1	; 0x01
 3dc:	9a 81       	ldd	r25, Y+2	; 0x02
 3de:	01 96       	adiw	r24, 0x01	; 1
 3e0:	89 83       	std	Y+1, r24	; 0x01
 3e2:	9a 83       	std	Y+2, r25	; 0x02
		tx_length = sizeof(tx);
		
		if (!((USART0.STATUS & 0x20) == 0)) /*if ready*/ {
			USART0.CTRLB |= 0x40;			//tx enable
			
			while (tx_length > tx_counter) {
 3e4:	2f a5       	ldd	r18, Y+47	; 0x2f
 3e6:	38 a9       	ldd	r19, Y+48	; 0x30
 3e8:	89 81       	ldd	r24, Y+1	; 0x01
 3ea:	9a 81       	ldd	r25, Y+2	; 0x02
 3ec:	82 17       	cp	r24, r18
 3ee:	93 07       	cpc	r25, r19
 3f0:	e4 f2       	brlt	.-72     	; 0x3aa <main+0x316>
				USART0.TXDATAL = (tx[tx_counter]);
				tx_counter++;
				
			}
			
					PORTA.PIN5CTRL = 0x00;		//disables pull up for PIN4
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	94 e0       	ldi	r25, 0x04	; 4
 3f6:	fc 01       	movw	r30, r24
 3f8:	15 8a       	std	Z+21, r1	; 0x15
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	aa e7       	ldi	r26, 0x7A	; 122
 400:	b4 e4       	ldi	r27, 0x44	; 68
 402:	89 ab       	std	Y+49, r24	; 0x31
 404:	9a ab       	std	Y+50, r25	; 0x32
 406:	ab ab       	std	Y+51, r26	; 0x33
 408:	bc ab       	std	Y+52, r27	; 0x34

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 40a:	24 e5       	ldi	r18, 0x54	; 84
 40c:	35 e5       	ldi	r19, 0x55	; 85
 40e:	40 e5       	ldi	r20, 0x50	; 80
 410:	54 e4       	ldi	r21, 0x44	; 68
 412:	69 a9       	ldd	r22, Y+49	; 0x31
 414:	7a a9       	ldd	r23, Y+50	; 0x32
 416:	8b a9       	ldd	r24, Y+51	; 0x33
 418:	9c a9       	ldd	r25, Y+52	; 0x34
 41a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__mulsf3>
 41e:	dc 01       	movw	r26, r24
 420:	cb 01       	movw	r24, r22
 422:	8d ab       	std	Y+53, r24	; 0x35
 424:	9e ab       	std	Y+54, r25	; 0x36
 426:	af ab       	std	Y+55, r26	; 0x37
 428:	b8 af       	std	Y+56, r27	; 0x38
	if (__tmp < 1.0)
 42a:	20 e0       	ldi	r18, 0x00	; 0
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	40 e8       	ldi	r20, 0x80	; 128
 430:	5f e3       	ldi	r21, 0x3F	; 63
 432:	6d a9       	ldd	r22, Y+53	; 0x35
 434:	7e a9       	ldd	r23, Y+54	; 0x36
 436:	8f a9       	ldd	r24, Y+55	; 0x37
 438:	98 ad       	ldd	r25, Y+56	; 0x38
 43a:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <__cmpsf2>
 43e:	88 23       	and	r24, r24
 440:	2c f4       	brge	.+10     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		__ticks = 1;
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	89 af       	std	Y+57, r24	; 0x39
 448:	9a af       	std	Y+58, r25	; 0x3a
 44a:	3f c0       	rjmp	.+126    	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
	else if (__tmp > 65535)
 44c:	20 e0       	ldi	r18, 0x00	; 0
 44e:	3f ef       	ldi	r19, 0xFF	; 255
 450:	4f e7       	ldi	r20, 0x7F	; 127
 452:	57 e4       	ldi	r21, 0x47	; 71
 454:	6d a9       	ldd	r22, Y+53	; 0x35
 456:	7e a9       	ldd	r23, Y+54	; 0x36
 458:	8f a9       	ldd	r24, Y+55	; 0x37
 45a:	98 ad       	ldd	r25, Y+56	; 0x38
 45c:	0e 94 4c 04 	call	0x898	; 0x898 <__gesf2>
 460:	18 16       	cp	r1, r24
 462:	4c f5       	brge	.+82     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 464:	20 e0       	ldi	r18, 0x00	; 0
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	40 e2       	ldi	r20, 0x20	; 32
 46a:	51 e4       	ldi	r21, 0x41	; 65
 46c:	69 a9       	ldd	r22, Y+49	; 0x31
 46e:	7a a9       	ldd	r23, Y+50	; 0x32
 470:	8b a9       	ldd	r24, Y+51	; 0x33
 472:	9c a9       	ldd	r25, Y+52	; 0x34
 474:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__mulsf3>
 478:	dc 01       	movw	r26, r24
 47a:	cb 01       	movw	r24, r22
 47c:	bc 01       	movw	r22, r24
 47e:	cd 01       	movw	r24, r26
 480:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__fixunssfsi>
 484:	dc 01       	movw	r26, r24
 486:	cb 01       	movw	r24, r22
 488:	89 af       	std	Y+57, r24	; 0x39
 48a:	9a af       	std	Y+58, r25	; 0x3a
 48c:	0f c0       	rjmp	.+30     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 48e:	83 e5       	ldi	r24, 0x53	; 83
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	8b af       	std	Y+59, r24	; 0x3b
 494:	9c af       	std	Y+60, r25	; 0x3c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 496:	8b ad       	ldd	r24, Y+59	; 0x3b
 498:	9c ad       	ldd	r25, Y+60	; 0x3c
 49a:	01 97       	sbiw	r24, 0x01	; 1
 49c:	f1 f7       	brne	.-4      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 49e:	8b af       	std	Y+59, r24	; 0x3b
 4a0:	9c af       	std	Y+60, r25	; 0x3c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4a2:	89 ad       	ldd	r24, Y+57	; 0x39
 4a4:	9a ad       	ldd	r25, Y+58	; 0x3a
 4a6:	01 97       	sbiw	r24, 0x01	; 1
 4a8:	89 af       	std	Y+57, r24	; 0x39
 4aa:	9a af       	std	Y+58, r25	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4ac:	89 ad       	ldd	r24, Y+57	; 0x39
 4ae:	9a ad       	ldd	r25, Y+58	; 0x3a
 4b0:	89 2b       	or	r24, r25
 4b2:	69 f7       	brne	.-38     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 4b4:	14 c0       	rjmp	.+40     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 4b6:	6d a9       	ldd	r22, Y+53	; 0x35
 4b8:	7e a9       	ldd	r23, Y+54	; 0x36
 4ba:	8f a9       	ldd	r24, Y+55	; 0x37
 4bc:	98 ad       	ldd	r25, Y+56	; 0x38
 4be:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__fixunssfsi>
 4c2:	dc 01       	movw	r26, r24
 4c4:	cb 01       	movw	r24, r22
 4c6:	89 af       	std	Y+57, r24	; 0x39
 4c8:	9a af       	std	Y+58, r25	; 0x3a
 4ca:	89 ad       	ldd	r24, Y+57	; 0x39
 4cc:	9a ad       	ldd	r25, Y+58	; 0x3a
 4ce:	8d af       	std	Y+61, r24	; 0x3d
 4d0:	9e af       	std	Y+62, r25	; 0x3e
 4d2:	8d ad       	ldd	r24, Y+61	; 0x3d
 4d4:	9e ad       	ldd	r25, Y+62	; 0x3e
 4d6:	01 97       	sbiw	r24, 0x01	; 1
 4d8:	f1 f7       	brne	.-4      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4da:	8d af       	std	Y+61, r24	; 0x3d
 4dc:	9e af       	std	Y+62, r25	; 0x3e
					_delay_ms(1000);
					PORTA.PIN5CTRL = 0x08;		//enables pull up for PIN4 (LED)
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	94 e0       	ldi	r25, 0x04	; 4
 4e2:	28 e0       	ldi	r18, 0x08	; 8
 4e4:	fc 01       	movw	r30, r24
 4e6:	25 8b       	std	Z+21, r18	; 0x15
				
		}
		
		tx_after = USART0.TXDATAL;
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	98 e0       	ldi	r25, 0x08	; 8
 4ec:	fc 01       	movw	r30, r24
 4ee:	82 81       	ldd	r24, Z+2	; 0x02
 4f0:	88 2f       	mov	r24, r24
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	a0 e0       	ldi	r26, 0x00	; 0
 4f6:	b0 e0       	ldi	r27, 0x00	; 0
 4f8:	bc 01       	movw	r22, r24
 4fa:	cd 01       	movw	r24, r26
 4fc:	0e 94 9a 03 	call	0x734	; 0x734 <__floatunsisf>
 500:	dc 01       	movw	r26, r24
 502:	cb 01       	movw	r24, r22
 504:	8b a7       	std	Y+43, r24	; 0x2b
 506:	9c a7       	std	Y+44, r25	; 0x2c
 508:	ad a7       	std	Y+45, r26	; 0x2d
 50a:	be a7       	std	Y+46, r27	; 0x2e

	}
 50c:	46 ce       	rjmp	.-884    	; 0x19a <main+0x106>

0000050e <__subsf3>:
 50e:	50 58       	subi	r21, 0x80	; 128

00000510 <__addsf3>:
 510:	bb 27       	eor	r27, r27
 512:	aa 27       	eor	r26, r26
 514:	0e 94 9f 02 	call	0x53e	; 0x53e <__addsf3x>
 518:	0c 94 12 04 	jmp	0x824	; 0x824 <__fp_round>
 51c:	0e 94 04 04 	call	0x808	; 0x808 <__fp_pscA>
 520:	38 f0       	brcs	.+14     	; 0x530 <__addsf3+0x20>
 522:	0e 94 0b 04 	call	0x816	; 0x816 <__fp_pscB>
 526:	20 f0       	brcs	.+8      	; 0x530 <__addsf3+0x20>
 528:	39 f4       	brne	.+14     	; 0x538 <__addsf3+0x28>
 52a:	9f 3f       	cpi	r25, 0xFF	; 255
 52c:	19 f4       	brne	.+6      	; 0x534 <__addsf3+0x24>
 52e:	26 f4       	brtc	.+8      	; 0x538 <__addsf3+0x28>
 530:	0c 94 01 04 	jmp	0x802	; 0x802 <__fp_nan>
 534:	0e f4       	brtc	.+2      	; 0x538 <__addsf3+0x28>
 536:	e0 95       	com	r30
 538:	e7 fb       	bst	r30, 7
 53a:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <__fp_inf>

0000053e <__addsf3x>:
 53e:	e9 2f       	mov	r30, r25
 540:	0e 94 23 04 	call	0x846	; 0x846 <__fp_split3>
 544:	58 f3       	brcs	.-42     	; 0x51c <__addsf3+0xc>
 546:	ba 17       	cp	r27, r26
 548:	62 07       	cpc	r22, r18
 54a:	73 07       	cpc	r23, r19
 54c:	84 07       	cpc	r24, r20
 54e:	95 07       	cpc	r25, r21
 550:	20 f0       	brcs	.+8      	; 0x55a <__addsf3x+0x1c>
 552:	79 f4       	brne	.+30     	; 0x572 <__addsf3x+0x34>
 554:	a6 f5       	brtc	.+104    	; 0x5be <__addsf3x+0x80>
 556:	0c 94 45 04 	jmp	0x88a	; 0x88a <__fp_zero>
 55a:	0e f4       	brtc	.+2      	; 0x55e <__addsf3x+0x20>
 55c:	e0 95       	com	r30
 55e:	0b 2e       	mov	r0, r27
 560:	ba 2f       	mov	r27, r26
 562:	a0 2d       	mov	r26, r0
 564:	0b 01       	movw	r0, r22
 566:	b9 01       	movw	r22, r18
 568:	90 01       	movw	r18, r0
 56a:	0c 01       	movw	r0, r24
 56c:	ca 01       	movw	r24, r20
 56e:	a0 01       	movw	r20, r0
 570:	11 24       	eor	r1, r1
 572:	ff 27       	eor	r31, r31
 574:	59 1b       	sub	r21, r25
 576:	99 f0       	breq	.+38     	; 0x59e <__addsf3x+0x60>
 578:	59 3f       	cpi	r21, 0xF9	; 249
 57a:	50 f4       	brcc	.+20     	; 0x590 <__addsf3x+0x52>
 57c:	50 3e       	cpi	r21, 0xE0	; 224
 57e:	68 f1       	brcs	.+90     	; 0x5da <__addsf3x+0x9c>
 580:	1a 16       	cp	r1, r26
 582:	f0 40       	sbci	r31, 0x00	; 0
 584:	a2 2f       	mov	r26, r18
 586:	23 2f       	mov	r18, r19
 588:	34 2f       	mov	r19, r20
 58a:	44 27       	eor	r20, r20
 58c:	58 5f       	subi	r21, 0xF8	; 248
 58e:	f3 cf       	rjmp	.-26     	; 0x576 <__addsf3x+0x38>
 590:	46 95       	lsr	r20
 592:	37 95       	ror	r19
 594:	27 95       	ror	r18
 596:	a7 95       	ror	r26
 598:	f0 40       	sbci	r31, 0x00	; 0
 59a:	53 95       	inc	r21
 59c:	c9 f7       	brne	.-14     	; 0x590 <__addsf3x+0x52>
 59e:	7e f4       	brtc	.+30     	; 0x5be <__addsf3x+0x80>
 5a0:	1f 16       	cp	r1, r31
 5a2:	ba 0b       	sbc	r27, r26
 5a4:	62 0b       	sbc	r22, r18
 5a6:	73 0b       	sbc	r23, r19
 5a8:	84 0b       	sbc	r24, r20
 5aa:	ba f0       	brmi	.+46     	; 0x5da <__addsf3x+0x9c>
 5ac:	91 50       	subi	r25, 0x01	; 1
 5ae:	a1 f0       	breq	.+40     	; 0x5d8 <__addsf3x+0x9a>
 5b0:	ff 0f       	add	r31, r31
 5b2:	bb 1f       	adc	r27, r27
 5b4:	66 1f       	adc	r22, r22
 5b6:	77 1f       	adc	r23, r23
 5b8:	88 1f       	adc	r24, r24
 5ba:	c2 f7       	brpl	.-16     	; 0x5ac <__addsf3x+0x6e>
 5bc:	0e c0       	rjmp	.+28     	; 0x5da <__addsf3x+0x9c>
 5be:	ba 0f       	add	r27, r26
 5c0:	62 1f       	adc	r22, r18
 5c2:	73 1f       	adc	r23, r19
 5c4:	84 1f       	adc	r24, r20
 5c6:	48 f4       	brcc	.+18     	; 0x5da <__addsf3x+0x9c>
 5c8:	87 95       	ror	r24
 5ca:	77 95       	ror	r23
 5cc:	67 95       	ror	r22
 5ce:	b7 95       	ror	r27
 5d0:	f7 95       	ror	r31
 5d2:	9e 3f       	cpi	r25, 0xFE	; 254
 5d4:	08 f0       	brcs	.+2      	; 0x5d8 <__addsf3x+0x9a>
 5d6:	b0 cf       	rjmp	.-160    	; 0x538 <__addsf3+0x28>
 5d8:	93 95       	inc	r25
 5da:	88 0f       	add	r24, r24
 5dc:	08 f0       	brcs	.+2      	; 0x5e0 <__addsf3x+0xa2>
 5de:	99 27       	eor	r25, r25
 5e0:	ee 0f       	add	r30, r30
 5e2:	97 95       	ror	r25
 5e4:	87 95       	ror	r24
 5e6:	08 95       	ret

000005e8 <__cmpsf2>:
 5e8:	0e 94 d7 03 	call	0x7ae	; 0x7ae <__fp_cmp>
 5ec:	08 f4       	brcc	.+2      	; 0x5f0 <__cmpsf2+0x8>
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	08 95       	ret

000005f2 <__divsf3>:
 5f2:	0e 94 0d 03 	call	0x61a	; 0x61a <__divsf3x>
 5f6:	0c 94 12 04 	jmp	0x824	; 0x824 <__fp_round>
 5fa:	0e 94 0b 04 	call	0x816	; 0x816 <__fp_pscB>
 5fe:	58 f0       	brcs	.+22     	; 0x616 <__divsf3+0x24>
 600:	0e 94 04 04 	call	0x808	; 0x808 <__fp_pscA>
 604:	40 f0       	brcs	.+16     	; 0x616 <__divsf3+0x24>
 606:	29 f4       	brne	.+10     	; 0x612 <__divsf3+0x20>
 608:	5f 3f       	cpi	r21, 0xFF	; 255
 60a:	29 f0       	breq	.+10     	; 0x616 <__divsf3+0x24>
 60c:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <__fp_inf>
 610:	51 11       	cpse	r21, r1
 612:	0c 94 46 04 	jmp	0x88c	; 0x88c <__fp_szero>
 616:	0c 94 01 04 	jmp	0x802	; 0x802 <__fp_nan>

0000061a <__divsf3x>:
 61a:	0e 94 23 04 	call	0x846	; 0x846 <__fp_split3>
 61e:	68 f3       	brcs	.-38     	; 0x5fa <__divsf3+0x8>

00000620 <__divsf3_pse>:
 620:	99 23       	and	r25, r25
 622:	b1 f3       	breq	.-20     	; 0x610 <__divsf3+0x1e>
 624:	55 23       	and	r21, r21
 626:	91 f3       	breq	.-28     	; 0x60c <__divsf3+0x1a>
 628:	95 1b       	sub	r25, r21
 62a:	55 0b       	sbc	r21, r21
 62c:	bb 27       	eor	r27, r27
 62e:	aa 27       	eor	r26, r26
 630:	62 17       	cp	r22, r18
 632:	73 07       	cpc	r23, r19
 634:	84 07       	cpc	r24, r20
 636:	38 f0       	brcs	.+14     	; 0x646 <__divsf3_pse+0x26>
 638:	9f 5f       	subi	r25, 0xFF	; 255
 63a:	5f 4f       	sbci	r21, 0xFF	; 255
 63c:	22 0f       	add	r18, r18
 63e:	33 1f       	adc	r19, r19
 640:	44 1f       	adc	r20, r20
 642:	aa 1f       	adc	r26, r26
 644:	a9 f3       	breq	.-22     	; 0x630 <__divsf3_pse+0x10>
 646:	35 d0       	rcall	.+106    	; 0x6b2 <__divsf3_pse+0x92>
 648:	0e 2e       	mov	r0, r30
 64a:	3a f0       	brmi	.+14     	; 0x65a <__divsf3_pse+0x3a>
 64c:	e0 e8       	ldi	r30, 0x80	; 128
 64e:	32 d0       	rcall	.+100    	; 0x6b4 <__divsf3_pse+0x94>
 650:	91 50       	subi	r25, 0x01	; 1
 652:	50 40       	sbci	r21, 0x00	; 0
 654:	e6 95       	lsr	r30
 656:	00 1c       	adc	r0, r0
 658:	ca f7       	brpl	.-14     	; 0x64c <__divsf3_pse+0x2c>
 65a:	2b d0       	rcall	.+86     	; 0x6b2 <__divsf3_pse+0x92>
 65c:	fe 2f       	mov	r31, r30
 65e:	29 d0       	rcall	.+82     	; 0x6b2 <__divsf3_pse+0x92>
 660:	66 0f       	add	r22, r22
 662:	77 1f       	adc	r23, r23
 664:	88 1f       	adc	r24, r24
 666:	bb 1f       	adc	r27, r27
 668:	26 17       	cp	r18, r22
 66a:	37 07       	cpc	r19, r23
 66c:	48 07       	cpc	r20, r24
 66e:	ab 07       	cpc	r26, r27
 670:	b0 e8       	ldi	r27, 0x80	; 128
 672:	09 f0       	breq	.+2      	; 0x676 <__divsf3_pse+0x56>
 674:	bb 0b       	sbc	r27, r27
 676:	80 2d       	mov	r24, r0
 678:	bf 01       	movw	r22, r30
 67a:	ff 27       	eor	r31, r31
 67c:	93 58       	subi	r25, 0x83	; 131
 67e:	5f 4f       	sbci	r21, 0xFF	; 255
 680:	3a f0       	brmi	.+14     	; 0x690 <__divsf3_pse+0x70>
 682:	9e 3f       	cpi	r25, 0xFE	; 254
 684:	51 05       	cpc	r21, r1
 686:	78 f0       	brcs	.+30     	; 0x6a6 <__divsf3_pse+0x86>
 688:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <__fp_inf>
 68c:	0c 94 46 04 	jmp	0x88c	; 0x88c <__fp_szero>
 690:	5f 3f       	cpi	r21, 0xFF	; 255
 692:	e4 f3       	brlt	.-8      	; 0x68c <__divsf3_pse+0x6c>
 694:	98 3e       	cpi	r25, 0xE8	; 232
 696:	d4 f3       	brlt	.-12     	; 0x68c <__divsf3_pse+0x6c>
 698:	86 95       	lsr	r24
 69a:	77 95       	ror	r23
 69c:	67 95       	ror	r22
 69e:	b7 95       	ror	r27
 6a0:	f7 95       	ror	r31
 6a2:	9f 5f       	subi	r25, 0xFF	; 255
 6a4:	c9 f7       	brne	.-14     	; 0x698 <__divsf3_pse+0x78>
 6a6:	88 0f       	add	r24, r24
 6a8:	91 1d       	adc	r25, r1
 6aa:	96 95       	lsr	r25
 6ac:	87 95       	ror	r24
 6ae:	97 f9       	bld	r25, 7
 6b0:	08 95       	ret
 6b2:	e1 e0       	ldi	r30, 0x01	; 1
 6b4:	66 0f       	add	r22, r22
 6b6:	77 1f       	adc	r23, r23
 6b8:	88 1f       	adc	r24, r24
 6ba:	bb 1f       	adc	r27, r27
 6bc:	62 17       	cp	r22, r18
 6be:	73 07       	cpc	r23, r19
 6c0:	84 07       	cpc	r24, r20
 6c2:	ba 07       	cpc	r27, r26
 6c4:	20 f0       	brcs	.+8      	; 0x6ce <__divsf3_pse+0xae>
 6c6:	62 1b       	sub	r22, r18
 6c8:	73 0b       	sbc	r23, r19
 6ca:	84 0b       	sbc	r24, r20
 6cc:	ba 0b       	sbc	r27, r26
 6ce:	ee 1f       	adc	r30, r30
 6d0:	88 f7       	brcc	.-30     	; 0x6b4 <__divsf3_pse+0x94>
 6d2:	e0 95       	com	r30
 6d4:	08 95       	ret

000006d6 <__fixunssfsi>:
 6d6:	0e 94 2b 04 	call	0x856	; 0x856 <__fp_splitA>
 6da:	88 f0       	brcs	.+34     	; 0x6fe <__fixunssfsi+0x28>
 6dc:	9f 57       	subi	r25, 0x7F	; 127
 6de:	98 f0       	brcs	.+38     	; 0x706 <__fixunssfsi+0x30>
 6e0:	b9 2f       	mov	r27, r25
 6e2:	99 27       	eor	r25, r25
 6e4:	b7 51       	subi	r27, 0x17	; 23
 6e6:	b0 f0       	brcs	.+44     	; 0x714 <__fixunssfsi+0x3e>
 6e8:	e1 f0       	breq	.+56     	; 0x722 <__fixunssfsi+0x4c>
 6ea:	66 0f       	add	r22, r22
 6ec:	77 1f       	adc	r23, r23
 6ee:	88 1f       	adc	r24, r24
 6f0:	99 1f       	adc	r25, r25
 6f2:	1a f0       	brmi	.+6      	; 0x6fa <__fixunssfsi+0x24>
 6f4:	ba 95       	dec	r27
 6f6:	c9 f7       	brne	.-14     	; 0x6ea <__fixunssfsi+0x14>
 6f8:	14 c0       	rjmp	.+40     	; 0x722 <__fixunssfsi+0x4c>
 6fa:	b1 30       	cpi	r27, 0x01	; 1
 6fc:	91 f0       	breq	.+36     	; 0x722 <__fixunssfsi+0x4c>
 6fe:	0e 94 45 04 	call	0x88a	; 0x88a <__fp_zero>
 702:	b1 e0       	ldi	r27, 0x01	; 1
 704:	08 95       	ret
 706:	0c 94 45 04 	jmp	0x88a	; 0x88a <__fp_zero>
 70a:	67 2f       	mov	r22, r23
 70c:	78 2f       	mov	r23, r24
 70e:	88 27       	eor	r24, r24
 710:	b8 5f       	subi	r27, 0xF8	; 248
 712:	39 f0       	breq	.+14     	; 0x722 <__fixunssfsi+0x4c>
 714:	b9 3f       	cpi	r27, 0xF9	; 249
 716:	cc f3       	brlt	.-14     	; 0x70a <__fixunssfsi+0x34>
 718:	86 95       	lsr	r24
 71a:	77 95       	ror	r23
 71c:	67 95       	ror	r22
 71e:	b3 95       	inc	r27
 720:	d9 f7       	brne	.-10     	; 0x718 <__fixunssfsi+0x42>
 722:	3e f4       	brtc	.+14     	; 0x732 <__fixunssfsi+0x5c>
 724:	90 95       	com	r25
 726:	80 95       	com	r24
 728:	70 95       	com	r23
 72a:	61 95       	neg	r22
 72c:	7f 4f       	sbci	r23, 0xFF	; 255
 72e:	8f 4f       	sbci	r24, 0xFF	; 255
 730:	9f 4f       	sbci	r25, 0xFF	; 255
 732:	08 95       	ret

00000734 <__floatunsisf>:
 734:	e8 94       	clt
 736:	09 c0       	rjmp	.+18     	; 0x74a <__floatsisf+0x12>

00000738 <__floatsisf>:
 738:	97 fb       	bst	r25, 7
 73a:	3e f4       	brtc	.+14     	; 0x74a <__floatsisf+0x12>
 73c:	90 95       	com	r25
 73e:	80 95       	com	r24
 740:	70 95       	com	r23
 742:	61 95       	neg	r22
 744:	7f 4f       	sbci	r23, 0xFF	; 255
 746:	8f 4f       	sbci	r24, 0xFF	; 255
 748:	9f 4f       	sbci	r25, 0xFF	; 255
 74a:	99 23       	and	r25, r25
 74c:	a9 f0       	breq	.+42     	; 0x778 <__floatsisf+0x40>
 74e:	f9 2f       	mov	r31, r25
 750:	96 e9       	ldi	r25, 0x96	; 150
 752:	bb 27       	eor	r27, r27
 754:	93 95       	inc	r25
 756:	f6 95       	lsr	r31
 758:	87 95       	ror	r24
 75a:	77 95       	ror	r23
 75c:	67 95       	ror	r22
 75e:	b7 95       	ror	r27
 760:	f1 11       	cpse	r31, r1
 762:	f8 cf       	rjmp	.-16     	; 0x754 <__floatsisf+0x1c>
 764:	fa f4       	brpl	.+62     	; 0x7a4 <__floatsisf+0x6c>
 766:	bb 0f       	add	r27, r27
 768:	11 f4       	brne	.+4      	; 0x76e <__floatsisf+0x36>
 76a:	60 ff       	sbrs	r22, 0
 76c:	1b c0       	rjmp	.+54     	; 0x7a4 <__floatsisf+0x6c>
 76e:	6f 5f       	subi	r22, 0xFF	; 255
 770:	7f 4f       	sbci	r23, 0xFF	; 255
 772:	8f 4f       	sbci	r24, 0xFF	; 255
 774:	9f 4f       	sbci	r25, 0xFF	; 255
 776:	16 c0       	rjmp	.+44     	; 0x7a4 <__floatsisf+0x6c>
 778:	88 23       	and	r24, r24
 77a:	11 f0       	breq	.+4      	; 0x780 <__floatsisf+0x48>
 77c:	96 e9       	ldi	r25, 0x96	; 150
 77e:	11 c0       	rjmp	.+34     	; 0x7a2 <__floatsisf+0x6a>
 780:	77 23       	and	r23, r23
 782:	21 f0       	breq	.+8      	; 0x78c <__floatsisf+0x54>
 784:	9e e8       	ldi	r25, 0x8E	; 142
 786:	87 2f       	mov	r24, r23
 788:	76 2f       	mov	r23, r22
 78a:	05 c0       	rjmp	.+10     	; 0x796 <__floatsisf+0x5e>
 78c:	66 23       	and	r22, r22
 78e:	71 f0       	breq	.+28     	; 0x7ac <__floatsisf+0x74>
 790:	96 e8       	ldi	r25, 0x86	; 134
 792:	86 2f       	mov	r24, r22
 794:	70 e0       	ldi	r23, 0x00	; 0
 796:	60 e0       	ldi	r22, 0x00	; 0
 798:	2a f0       	brmi	.+10     	; 0x7a4 <__floatsisf+0x6c>
 79a:	9a 95       	dec	r25
 79c:	66 0f       	add	r22, r22
 79e:	77 1f       	adc	r23, r23
 7a0:	88 1f       	adc	r24, r24
 7a2:	da f7       	brpl	.-10     	; 0x79a <__floatsisf+0x62>
 7a4:	88 0f       	add	r24, r24
 7a6:	96 95       	lsr	r25
 7a8:	87 95       	ror	r24
 7aa:	97 f9       	bld	r25, 7
 7ac:	08 95       	ret

000007ae <__fp_cmp>:
 7ae:	99 0f       	add	r25, r25
 7b0:	00 08       	sbc	r0, r0
 7b2:	55 0f       	add	r21, r21
 7b4:	aa 0b       	sbc	r26, r26
 7b6:	e0 e8       	ldi	r30, 0x80	; 128
 7b8:	fe ef       	ldi	r31, 0xFE	; 254
 7ba:	16 16       	cp	r1, r22
 7bc:	17 06       	cpc	r1, r23
 7be:	e8 07       	cpc	r30, r24
 7c0:	f9 07       	cpc	r31, r25
 7c2:	c0 f0       	brcs	.+48     	; 0x7f4 <__fp_cmp+0x46>
 7c4:	12 16       	cp	r1, r18
 7c6:	13 06       	cpc	r1, r19
 7c8:	e4 07       	cpc	r30, r20
 7ca:	f5 07       	cpc	r31, r21
 7cc:	98 f0       	brcs	.+38     	; 0x7f4 <__fp_cmp+0x46>
 7ce:	62 1b       	sub	r22, r18
 7d0:	73 0b       	sbc	r23, r19
 7d2:	84 0b       	sbc	r24, r20
 7d4:	95 0b       	sbc	r25, r21
 7d6:	39 f4       	brne	.+14     	; 0x7e6 <__fp_cmp+0x38>
 7d8:	0a 26       	eor	r0, r26
 7da:	61 f0       	breq	.+24     	; 0x7f4 <__fp_cmp+0x46>
 7dc:	23 2b       	or	r18, r19
 7de:	24 2b       	or	r18, r20
 7e0:	25 2b       	or	r18, r21
 7e2:	21 f4       	brne	.+8      	; 0x7ec <__fp_cmp+0x3e>
 7e4:	08 95       	ret
 7e6:	0a 26       	eor	r0, r26
 7e8:	09 f4       	brne	.+2      	; 0x7ec <__fp_cmp+0x3e>
 7ea:	a1 40       	sbci	r26, 0x01	; 1
 7ec:	a6 95       	lsr	r26
 7ee:	8f ef       	ldi	r24, 0xFF	; 255
 7f0:	81 1d       	adc	r24, r1
 7f2:	81 1d       	adc	r24, r1
 7f4:	08 95       	ret

000007f6 <__fp_inf>:
 7f6:	97 f9       	bld	r25, 7
 7f8:	9f 67       	ori	r25, 0x7F	; 127
 7fa:	80 e8       	ldi	r24, 0x80	; 128
 7fc:	70 e0       	ldi	r23, 0x00	; 0
 7fe:	60 e0       	ldi	r22, 0x00	; 0
 800:	08 95       	ret

00000802 <__fp_nan>:
 802:	9f ef       	ldi	r25, 0xFF	; 255
 804:	80 ec       	ldi	r24, 0xC0	; 192
 806:	08 95       	ret

00000808 <__fp_pscA>:
 808:	00 24       	eor	r0, r0
 80a:	0a 94       	dec	r0
 80c:	16 16       	cp	r1, r22
 80e:	17 06       	cpc	r1, r23
 810:	18 06       	cpc	r1, r24
 812:	09 06       	cpc	r0, r25
 814:	08 95       	ret

00000816 <__fp_pscB>:
 816:	00 24       	eor	r0, r0
 818:	0a 94       	dec	r0
 81a:	12 16       	cp	r1, r18
 81c:	13 06       	cpc	r1, r19
 81e:	14 06       	cpc	r1, r20
 820:	05 06       	cpc	r0, r21
 822:	08 95       	ret

00000824 <__fp_round>:
 824:	09 2e       	mov	r0, r25
 826:	03 94       	inc	r0
 828:	00 0c       	add	r0, r0
 82a:	11 f4       	brne	.+4      	; 0x830 <__fp_round+0xc>
 82c:	88 23       	and	r24, r24
 82e:	52 f0       	brmi	.+20     	; 0x844 <__fp_round+0x20>
 830:	bb 0f       	add	r27, r27
 832:	40 f4       	brcc	.+16     	; 0x844 <__fp_round+0x20>
 834:	bf 2b       	or	r27, r31
 836:	11 f4       	brne	.+4      	; 0x83c <__fp_round+0x18>
 838:	60 ff       	sbrs	r22, 0
 83a:	04 c0       	rjmp	.+8      	; 0x844 <__fp_round+0x20>
 83c:	6f 5f       	subi	r22, 0xFF	; 255
 83e:	7f 4f       	sbci	r23, 0xFF	; 255
 840:	8f 4f       	sbci	r24, 0xFF	; 255
 842:	9f 4f       	sbci	r25, 0xFF	; 255
 844:	08 95       	ret

00000846 <__fp_split3>:
 846:	57 fd       	sbrc	r21, 7
 848:	90 58       	subi	r25, 0x80	; 128
 84a:	44 0f       	add	r20, r20
 84c:	55 1f       	adc	r21, r21
 84e:	59 f0       	breq	.+22     	; 0x866 <__fp_splitA+0x10>
 850:	5f 3f       	cpi	r21, 0xFF	; 255
 852:	71 f0       	breq	.+28     	; 0x870 <__fp_splitA+0x1a>
 854:	47 95       	ror	r20

00000856 <__fp_splitA>:
 856:	88 0f       	add	r24, r24
 858:	97 fb       	bst	r25, 7
 85a:	99 1f       	adc	r25, r25
 85c:	61 f0       	breq	.+24     	; 0x876 <__fp_splitA+0x20>
 85e:	9f 3f       	cpi	r25, 0xFF	; 255
 860:	79 f0       	breq	.+30     	; 0x880 <__fp_splitA+0x2a>
 862:	87 95       	ror	r24
 864:	08 95       	ret
 866:	12 16       	cp	r1, r18
 868:	13 06       	cpc	r1, r19
 86a:	14 06       	cpc	r1, r20
 86c:	55 1f       	adc	r21, r21
 86e:	f2 cf       	rjmp	.-28     	; 0x854 <__fp_split3+0xe>
 870:	46 95       	lsr	r20
 872:	f1 df       	rcall	.-30     	; 0x856 <__fp_splitA>
 874:	08 c0       	rjmp	.+16     	; 0x886 <__fp_splitA+0x30>
 876:	16 16       	cp	r1, r22
 878:	17 06       	cpc	r1, r23
 87a:	18 06       	cpc	r1, r24
 87c:	99 1f       	adc	r25, r25
 87e:	f1 cf       	rjmp	.-30     	; 0x862 <__fp_splitA+0xc>
 880:	86 95       	lsr	r24
 882:	71 05       	cpc	r23, r1
 884:	61 05       	cpc	r22, r1
 886:	08 94       	sec
 888:	08 95       	ret

0000088a <__fp_zero>:
 88a:	e8 94       	clt

0000088c <__fp_szero>:
 88c:	bb 27       	eor	r27, r27
 88e:	66 27       	eor	r22, r22
 890:	77 27       	eor	r23, r23
 892:	cb 01       	movw	r24, r22
 894:	97 f9       	bld	r25, 7
 896:	08 95       	ret

00000898 <__gesf2>:
 898:	0e 94 d7 03 	call	0x7ae	; 0x7ae <__fp_cmp>
 89c:	08 f4       	brcc	.+2      	; 0x8a0 <__gesf2+0x8>
 89e:	8f ef       	ldi	r24, 0xFF	; 255
 8a0:	08 95       	ret

000008a2 <__mulsf3>:
 8a2:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__mulsf3x>
 8a6:	0c 94 12 04 	jmp	0x824	; 0x824 <__fp_round>
 8aa:	0e 94 04 04 	call	0x808	; 0x808 <__fp_pscA>
 8ae:	38 f0       	brcs	.+14     	; 0x8be <__mulsf3+0x1c>
 8b0:	0e 94 0b 04 	call	0x816	; 0x816 <__fp_pscB>
 8b4:	20 f0       	brcs	.+8      	; 0x8be <__mulsf3+0x1c>
 8b6:	95 23       	and	r25, r21
 8b8:	11 f0       	breq	.+4      	; 0x8be <__mulsf3+0x1c>
 8ba:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <__fp_inf>
 8be:	0c 94 01 04 	jmp	0x802	; 0x802 <__fp_nan>
 8c2:	11 24       	eor	r1, r1
 8c4:	0c 94 46 04 	jmp	0x88c	; 0x88c <__fp_szero>

000008c8 <__mulsf3x>:
 8c8:	0e 94 23 04 	call	0x846	; 0x846 <__fp_split3>
 8cc:	70 f3       	brcs	.-36     	; 0x8aa <__mulsf3+0x8>

000008ce <__mulsf3_pse>:
 8ce:	95 9f       	mul	r25, r21
 8d0:	c1 f3       	breq	.-16     	; 0x8c2 <__mulsf3+0x20>
 8d2:	95 0f       	add	r25, r21
 8d4:	50 e0       	ldi	r21, 0x00	; 0
 8d6:	55 1f       	adc	r21, r21
 8d8:	62 9f       	mul	r22, r18
 8da:	f0 01       	movw	r30, r0
 8dc:	72 9f       	mul	r23, r18
 8de:	bb 27       	eor	r27, r27
 8e0:	f0 0d       	add	r31, r0
 8e2:	b1 1d       	adc	r27, r1
 8e4:	63 9f       	mul	r22, r19
 8e6:	aa 27       	eor	r26, r26
 8e8:	f0 0d       	add	r31, r0
 8ea:	b1 1d       	adc	r27, r1
 8ec:	aa 1f       	adc	r26, r26
 8ee:	64 9f       	mul	r22, r20
 8f0:	66 27       	eor	r22, r22
 8f2:	b0 0d       	add	r27, r0
 8f4:	a1 1d       	adc	r26, r1
 8f6:	66 1f       	adc	r22, r22
 8f8:	82 9f       	mul	r24, r18
 8fa:	22 27       	eor	r18, r18
 8fc:	b0 0d       	add	r27, r0
 8fe:	a1 1d       	adc	r26, r1
 900:	62 1f       	adc	r22, r18
 902:	73 9f       	mul	r23, r19
 904:	b0 0d       	add	r27, r0
 906:	a1 1d       	adc	r26, r1
 908:	62 1f       	adc	r22, r18
 90a:	83 9f       	mul	r24, r19
 90c:	a0 0d       	add	r26, r0
 90e:	61 1d       	adc	r22, r1
 910:	22 1f       	adc	r18, r18
 912:	74 9f       	mul	r23, r20
 914:	33 27       	eor	r19, r19
 916:	a0 0d       	add	r26, r0
 918:	61 1d       	adc	r22, r1
 91a:	23 1f       	adc	r18, r19
 91c:	84 9f       	mul	r24, r20
 91e:	60 0d       	add	r22, r0
 920:	21 1d       	adc	r18, r1
 922:	82 2f       	mov	r24, r18
 924:	76 2f       	mov	r23, r22
 926:	6a 2f       	mov	r22, r26
 928:	11 24       	eor	r1, r1
 92a:	9f 57       	subi	r25, 0x7F	; 127
 92c:	50 40       	sbci	r21, 0x00	; 0
 92e:	9a f0       	brmi	.+38     	; 0x956 <__mulsf3_pse+0x88>
 930:	f1 f0       	breq	.+60     	; 0x96e <__mulsf3_pse+0xa0>
 932:	88 23       	and	r24, r24
 934:	4a f0       	brmi	.+18     	; 0x948 <__mulsf3_pse+0x7a>
 936:	ee 0f       	add	r30, r30
 938:	ff 1f       	adc	r31, r31
 93a:	bb 1f       	adc	r27, r27
 93c:	66 1f       	adc	r22, r22
 93e:	77 1f       	adc	r23, r23
 940:	88 1f       	adc	r24, r24
 942:	91 50       	subi	r25, 0x01	; 1
 944:	50 40       	sbci	r21, 0x00	; 0
 946:	a9 f7       	brne	.-22     	; 0x932 <__mulsf3_pse+0x64>
 948:	9e 3f       	cpi	r25, 0xFE	; 254
 94a:	51 05       	cpc	r21, r1
 94c:	80 f0       	brcs	.+32     	; 0x96e <__mulsf3_pse+0xa0>
 94e:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <__fp_inf>
 952:	0c 94 46 04 	jmp	0x88c	; 0x88c <__fp_szero>
 956:	5f 3f       	cpi	r21, 0xFF	; 255
 958:	e4 f3       	brlt	.-8      	; 0x952 <__mulsf3_pse+0x84>
 95a:	98 3e       	cpi	r25, 0xE8	; 232
 95c:	d4 f3       	brlt	.-12     	; 0x952 <__mulsf3_pse+0x84>
 95e:	86 95       	lsr	r24
 960:	77 95       	ror	r23
 962:	67 95       	ror	r22
 964:	b7 95       	ror	r27
 966:	f7 95       	ror	r31
 968:	e7 95       	ror	r30
 96a:	9f 5f       	subi	r25, 0xFF	; 255
 96c:	c1 f7       	brne	.-16     	; 0x95e <__mulsf3_pse+0x90>
 96e:	fe 2b       	or	r31, r30
 970:	88 0f       	add	r24, r24
 972:	91 1d       	adc	r25, r1
 974:	96 95       	lsr	r25
 976:	87 95       	ror	r24
 978:	97 f9       	bld	r25, 7
 97a:	08 95       	ret

0000097c <_exit>:
 97c:	f8 94       	cli

0000097e <__stop_program>:
 97e:	ff cf       	rjmp	.-2      	; 0x97e <__stop_program>
